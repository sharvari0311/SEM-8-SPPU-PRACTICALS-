#include <iostream>
#include <vector>
#include <omp.h>
#include <chrono>
using namespace std;
using namespace std::chrono;

// ---------- Sequential Bubble Sort ----------
void bubbleSortSequential(vector<int>& arr) {
    int n = arr.size();
    for(int i = 0; i < n - 1; ++i)
        for(int j = 0; j < n - i - 1; ++j)
            if(arr[j] > arr[j+1])
                swap(arr[j], arr[j+1]);
}

// ---------- Parallel Bubble Sort using OpenMP ----------
void bubbleSortParallel(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n; ++i) {
        #pragma omp parallel for
        for (int j = i % 2; j < n - 1; j += 2) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

// ---------- Sequential Merge Sort ----------
void merge(vector<int>& arr, int l, int m, int r) {
    vector<int> left(arr.begin() + l, arr.begin() + m + 1);
    vector<int> right(arr.begin() + m + 1, arr.begin() + r + 1);

    int i = 0, j = 0, k = l;
    while (i < left.size() && j < right.size()) {
        if (left[i] <= right[j])
            arr[k++] = left[i++];
        else
            arr[k++] = right[j++];
    }
    while (i < left.size()) arr[k++] = left[i++];
    while (j < right.size()) arr[k++] = right[j++];
}

void mergeSortSequential(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        mergeSortSequential(arr, l, m);
        mergeSortSequential(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

// ---------- Parallel Merge Sort using OpenMP ----------
void mergeSortParallel(vector<int>& arr, int l, int r, int depth = 0) {
    if (l < r) {
        int m = (l + r) / 2;
        if (depth < 4) { // limit depth to avoid overhead
            #pragma omp parallel sections
            {
                #pragma omp section
                mergeSortParallel(arr, l, m, depth + 1);
                #pragma omp section
                mergeSortParallel(arr, m + 1, r, depth + 1);
            }
        } else {
            mergeSortSequential(arr, l, m);
            mergeSortSequential(arr, m + 1, r);
        }
        merge(arr, l, m, r);
    }
}

// ---------- Utility ----------
void printArray(const vector<int>& arr) {
    for (int x : arr) cout << x << " ";
    cout << endl;
}

int main() {
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter the elements of the array:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    vector<int> a1 = arr, a2 = arr;
    vector<int> b1 = arr, b2 = arr;

    cout << "\n=== Bubble Sort ===\n";

    auto start = high_resolution_clock::now();
    bubbleSortSequential(a1);
    auto end = high_resolution_clock::now();
    cout << "Sequential Time: " << duration_cast<milliseconds>(end - start).count() << " ms\n";

    start = high_resolution_clock::now();
    bubbleSortParallel(a2);
    end = high_resolution_clock::now();
    cout << "Parallel Time:   " << duration_cast<milliseconds>(end - start).count() << " ms\n";


    cout << "\n=== Merge Sort ===\n";

    start = high_resolution_clock::now();
    mergeSortSequential(b1, 0, b1.size() - 1);
    end = high_resolution_clock::now();
    cout << "Sequential Time: " << duration_cast<milliseconds>(end - start).count() << " ms\n";

    start = high_resolution_clock::now();
    mergeSortParallel(b2, 0, b2.size() - 1);
    end = high_resolution_clock::now();
    cout << "Parallel Time:   " << duration_cast<milliseconds>(end - start).count() << " ms\n";

    return 0;
}

g++ -fopenmp program.cpp -o program

